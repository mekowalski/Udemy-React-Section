State is quite challenging!!!
RULES OF STATE
-Only usable with Class Components
  (Technically can be used with functional Components using the 'hook' system)
  (WAY MORE CHALLENGING)

-State and Props will be confusing :(

-State is a JS object that contains data relevant to a Component
  (One single State that is relevant to App, one single State relevant to SeasonContent)

-Updating State on a Component causes Component to (almost) instantly re-render

-State must be initialized when a Component is created

-State can ONLY be updated using the 'setState' function
  -state = {default state here}
  -this.setState({other updated state here})
  eg: search term
  state = {'tulips'}
  this.setState({new-search-term-for-mountains}) *that would obviously be a variable, not hardcoded


INITIALIZE STATE THROUGH CONSTRUCTORS
-Initialize State when Component is created
-Constructor function is not required by React, it's a JS function
-This function will automatically be called before anything else
eg:
class App extends React.Component {
  constructor(props) {
    super(props)
  }

*super(props): App Component extends functionality from React base class
*This base class has a constructor function of its own going through some amount of setup
*A constructor function essentially overwrites/replaces the constructor function inside REACT.COMPONENT
*Still want to make sure the setup code in the REACT.COMPONENT constructor function still gets called
*And to make sure all the Parent (REACT.COMPONENT) gets called, super(props) has to be called


-In order to initialize State object, underneath super(props) call, define initial State
eg:
class App extends React.Component {
  constructor(props) {
    super(props)

    this.state = {}
  }
*{} object holds data of state

*SIDENOTE: Never want to initialize some work/request from a call in the render() method because it gets
 called ALL THE TIME

-Updating State on a Component causes Component to (almost) instantly re-render
-The instance the App Component shows on screen or and instance is created, it will begin attempting to
 get the user location
-setState is called in order to update State
eg:
class App extends React.Component {
  constructor(props) {
    super(props)

    this.state = { lat: null }

    window.navigator.geolocation.getCurrentPosition(
      position => {
        this.setState({ lat: position.coords.latitude })
      },
      error => console.log(error)
    );
  }
