1. Install/Update Node JS
2. Install create-react-app
BREAKDOWN:
npm install -g create-react-app
npm:              Runs npm(node package manager)
install:          'install' a package onto my computer
-g:               Installs this package globally to run it from the terminal
create-react-app: Name of package wanting to install

3. Generate a project
4. Build a project!!!


////////////////////////////////////////////////////////////////////////////////
JSX
-No browser actually understand what JSX is, Babel converts JSX for browser use and support
-JSX allows writing function calls in a a much compact and easy format

-babeljs.io
eg:
JSX
const App = () => {
  return <div>Hi There!</div>;
};

Results into a Function Call
const App = () => {
  return React.createElement(
    "div",
    null,
    "Hi There!"
  );
};


CONVERT HTML TO JSX
1. Special dialect of JS(it is NOT HTML)
2. Browsers don't understand JSX code, JSX is written then tools will turn it into normal JS
3. Similar in form/function to HTML with a few differences

JSX vs html
-Adding custom styling to an element uses different syntax
eg:
HTML: <div style='background-color: red;'></div>
JSX: <div style={{backgroundColor: 'red'}}></div>


-Adding a class to an element uses different syntax
*class is a reserved JS keyword*
eg:
HTML: <label class="label">Enter Name: </label>
JSX: <label className="label">Enter Name: </label>


-JSX can reference JS variables
*take JS variable and print it up in JSX block*
eg:
const App = () => {
  const buttonText = 'Click Me'

  return (
    <button style={{ backgroundColor: 'green', color: 'white' }}>
      {buttonText}
    </button>
  )
}


VALUES JSX CAN'T SHOW
-What you can reference inside a JSX
-Values can be a string, numbers, an array of strings/numbers
-Not allowed to reference a JS object inside JSX unless you call the key after the variable
