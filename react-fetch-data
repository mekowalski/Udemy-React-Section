-The application is running inside the user's browser
-Enter search term and hit enter, make AJAX/Network request to an API

 -----      --->Send data about photos for dogs--->    ----------
| APP |                                               | UNSPLASH |
 -----             <---Here you go!<---               |    API   |
                                                       ----------
*Unsplash is a company focused on stock images or images of all types

-Send a request to get list of images of the key term(dogs)
-Unsplash API sends JSON records matching the request
-Use that JSON to render a big list of the search term results


AXIOS VS FETCH
-Not the job of React library to make request to API
-React only shows HTML content and handles user interaction
-AJAX request is a separate piece of the code(AJAX Client)
1.Axios: Third party package
-Handles network requests in predictable fashion
-Nicer development experience

2.Fetch: Technically not a library, singular function built into modern browsers
-Basic, lower level code


VIEW REQUEST RESULTS
-Implement Axios
-Modify onSearchSubmit to call Axios function
-Use Axios and Unsplash doc to make request to API
-Console log some images

eg: App/onSearchSubmit
onSearchSubmit(term) {
  axios.get('https://api.unsplash.com/search/photos', {
    params: { query: term },
    headers: {
      Authorization: 'Client-ID cd676e1ef029ce061d3722b47bc05267297569b249b49306547aa9fb1de2213e'
    }
  })
  //1st arg: address to make GET request to(endpoint)
  //2nd arg: object to customize the request
}


HANDLE REQUEST WITH ASYNC AWAIT
-Get data from request and show it on the screen
1. Component renders itself one time with no photos list
2. onSearchSubmit method called
3. Request made to Unsplash
---WAIT---
4. Request is complete
5. Set photo data on State of App Component
6. App Component re-renders and shows photos!

-When making a request with Axios, it returns an object called a Promise
-Promise: object that gives notification when request is completed
  -Chain on .then(), it is called at some point in the future
eg: First Method - .then Promise
onSearchSubmit(term) {
  axios.get('https://api.unsplash.com/search/photos', {
    params: { query: term },
    headers: {
      Authorization: 'Client-ID cd676e1ef029ce061d3722b47bc05267297569b249b49306547aa9fb1de2213e'
    }
  })
  .then((response) => {
    console.log(response.data.results)
  })
}

eg: Second Method - Async Await
async onSearchSubmit(term) {
  const response = await axios
  .get('https://api.unsplash.com/search/photos', {
    params: { query: term },
    headers: {
      Authorization: 'Client-ID cd676e1ef029ce061d3722b47bc05267297569b249b49306547aa9fb1de2213e'
    }
  });
  console.log(response.data.results)
}
